diff --git a/rngd.c b/rngd.c
index 7133eca..9886d6b 100644
--- a/rngd.c
+++ b/rngd.c
@@ -91,20 +91,39 @@ static struct argp_option options[] = {
 
 	{ "timeout", 't', "nnn", 0,
 	  "Interval written to random-device when the entropy pool is full, in seconds (default: 60)" },
+	{ "no-tpm", 'n', "1|0", 0,
+	  "do not use tpm as a source of random number input (default: 0)" },
 
 	{ 0 },
 };
 
 static struct arguments default_arguments = {
-	.rng_name	= "/dev/hw_random",
 	.random_name	= "/dev/random",
 	.poll_timeout	= 60,
 	.random_step	= 64,
-	.fill_watermark = 2048,
+	.fill_watermark	= 2048,
 	.daemon		= 1,
+	.enable_tpm	= 1,
 };
 struct arguments *arguments = &default_arguments;
 
+static struct rng rng_default = {
+	.rng_name	= "/dev/hw_random",
+	.rng_fd		= -1,
+	.xread		= xread,
+	.fipsctx	= NULL,
+	.next		= NULL,
+};
+
+static struct rng rng_tpm = {
+	.rng_name	= "/dev/tpm0",
+	.rng_fd		= -1,
+	.xread		= xread_tpm,
+	.fipsctx	= NULL,
+	.next		= NULL,
+};
+
+struct rng *rng_list;
 
 /*
  * command line processing
@@ -118,7 +137,7 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 		arguments->random_name = arg;
 		break;
 	case 'r':
-		arguments->rng_name = arg;
+		rng_default.rng_name = arg;
 		break;
 	case 't': {
 		float f;
@@ -147,6 +166,14 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 			arguments->fill_watermark = n;
 		break;
 	}
+	case 'n': {
+		int n;
+		if ((sscanf(arg,"%i", &n) == 0) || ((n | 1)!=1))
+			argp_usage(state);
+		else
+			arguments->enable_tpm = 0;
+		break;
+	}
 
 	default:
 		return ARGP_ERR_UNKNOWN;
@@ -158,39 +185,64 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 static struct argp argp = { options, parse_opt, NULL, doc };
 
 
-static void do_loop(int random_step,
-		    double poll_timeout)
+static int update_kernel_random(int random_step, double poll_timeout,
+	unsigned char *buf, fips_ctx_t *fipsctx)
 {
-	unsigned char buf[FIPS_RNG_BUFFER_SIZE];
 	unsigned char *p;
 	int fips;
 
-	for (;;) {
-		xread(buf, sizeof buf);
+	fips = fips_run_rng_test(fipsctx, buf);
+	if (fips) {
+		message(LOG_DAEMON|LOG_ERR, "failed fips test\n");
+		return 1;
+	}
 
-		fips = fips_run_rng_test(&fipsctx, buf);
+	for (p = buf; p + random_step <= &buf[FIPS_RNG_BUFFER_SIZE];
+		 p += random_step) {
+		random_add_entropy(p, random_step);
+		random_sleep(poll_timeout);
+	}
+	return 0;
+}
 
-		if (fips) {
-			message(LOG_DAEMON|LOG_ERR, "failed fips test\n");
-			sleep(1);
-			continue;
-		}
+static void do_loop(int random_step, double poll_timeout)
+{
+	unsigned char buf[FIPS_RNG_BUFFER_SIZE];
+	int retval;
 
-		for (p = buf; p + random_step <= &buf[sizeof buf];
-		     p += random_step) {
-			random_add_entropy(p, random_step);
-			random_sleep(poll_timeout);
+	for (;;) {
+		struct rng *iter;
+		for (iter = rng_list; iter; iter = iter->next)
+		{
+			retval = iter->xread(buf, sizeof buf, iter);
+			if (retval > 0)
+				update_kernel_random(random_step,
+						     poll_timeout, buf,
+						     iter->fipsctx);
 		}
 	}
 }
 
-
 int main(int argc, char **argv)
 {
+	int rc_rng = 1;
+	int rc_tpm = 1;
+
+	/* Parsing of commandline parameters */
 	argp_parse(&argp, argc, argv, 0, 0, arguments);
 
-	/* Init entropy source, and open TRNG device */
-	init_entropy_source(arguments->rng_name);
+	/* Init entropy sources, and open TRNG device */
+	rc_rng = init_entropy_source(&rng_default);
+	if (arguments->enable_tpm)
+		rc_tpm = init_tpm_entropy_source(&rng_tpm);
+
+	if (rc_rng && rc_tpm) {
+		message(LOG_DAEMON|LOG_ERR,
+			"can't open entropy source(tpm or intel/amd rng)");
+		message(LOG_DAEMON|LOG_ERR,
+			"Maybe RNG device modules are not loaded\n");
+		return 1;
+	}
 
 	/* Init entropy sink and open random device */
 	init_kernel_rng(arguments->random_name);
diff --git a/rngd.h b/rngd.h
index dbc4419..641a2ec 100644
--- a/rngd.h
+++ b/rngd.h
@@ -35,16 +35,27 @@
 /* Command line arguments and processing */
 struct arguments {
 	char *random_name;
-	char *rng_name;
-	
+
 	int random_step;
 	int fill_watermark;
 	double poll_timeout;
 
 	int daemon;
+	int enable_tpm;
 };
 extern struct arguments *arguments;
 
+/* structures to store rng information */
+struct rng {
+	char *rng_name;
+	int rng_fd;
+
+	int (*xread) (void *buf, size_t size, struct rng *ent_src);
+	fips_ctx_t *fipsctx;
+
+	struct rng *next;
+};
+
 /* Background/daemon mode */
 extern int am_daemon;			/* Nonzero if we went daemon */
 
diff --git a/rngd_entsource.c b/rngd_entsource.c
index 86d6646..2042de9 100644
--- a/rngd_entsource.c
+++ b/rngd_entsource.c
@@ -42,20 +42,19 @@
 #include "rngd_entsource.h"
 
 
-/* Logic and contexts */
-static int rng_fd;			/* rng data source */
-fips_ctx_t fipsctx;			/* Context for the FIPS tests */
-
+/* The overhead incured when tpm returns the random nos as per TCG spec
+ * it is 14 bytes.*/
+#define TPM_GET_RNG_OVERHEAD	14
 
 /* Read data from the entropy source */
-void xread(void *buf, size_t size)
+int xread(void *buf, size_t size, struct rng *ent_src)
 {
 	size_t off = 0;
 	ssize_t r;
 
 	while (size > 0) {
 		do {
-			r = read(rng_fd, buf + off, size);
+			r = read(ent_src->rng_fd, buf + off, size);
 		} while ((r == -1) && (errno == EINTR));
 		if (r <= 0)
 			break;
@@ -65,12 +64,86 @@ void xread(void *buf, size_t size)
 
 	if (size) {
 		message(LOG_DAEMON|LOG_ERR, "read error\n");
-		exit(1);
+		return -1;
+	}
+	return 0;
+}
+
+/* tpm rng read call to kernel has 13 bytes of overhead
+ * the logic to process this involves reading to a temporary_buf
+ * and copying the no generated to buf */
+int xread_tpm(void *buf, size_t size, struct rng *ent_src)
+{
+	size_t bytes_read = 0;
+	ssize_t r;
+	int retval;
+	unsigned char *temp_buf = NULL;
+	unsigned char rng_cmd[] = {
+		0, 193,            /* TPM_TAG_RQU_COMMAND */
+		0, 0, 0, 14,       /* length */
+		0, 0, 0, 70,       /* TPM_ORD_GetRandom */
+		0, 0, 0, 0,        /* number of bytes to return */
+	};
+	char *offset;
+
+    ent_src->rng_fd = open(ent_src->rng_name, O_RDWR);
+    if (ent_src->rng_fd == -1) {
+        return -1;
+    }
+
+	temp_buf = (unsigned char *) malloc(size + TPM_GET_RNG_OVERHEAD);
+	memset(temp_buf, 0, (size+TPM_GET_RNG_OVERHEAD));
+	if (temp_buf == NULL) {
+		message(LOG_ERR|LOG_INFO,"No memory");
+		return -1;
+	}
+	/* 32 bits has been reserved for random byte size */
+	rng_cmd[13] = (unsigned char)(size & 0xFF);
+	rng_cmd[12] = (unsigned char)((size >> 8) & 0xFF);
+	rng_cmd[11] = (unsigned char)((size >> 16) & 0xFF);
+	rng_cmd[10] = (unsigned char)((size >> 24) & 0xFF);
+	offset = buf;
+	while (bytes_read < size) {
+		r=0;
+		while (r < sizeof(rng_cmd)) {
+			retval = write(ent_src->rng_fd,
+				       rng_cmd + r,
+				       sizeof(rng_cmd) - r);
+			if (retval < 0) {
+				message(LOG_ERR|LOG_INFO,
+					"Error writing %s\n",
+					ent_src->rng_name);
+				retval = -1;
+				goto error_out;
+			}
+			r += retval;
+		}
+		if (r < sizeof(rng_cmd)) {
+			message(LOG_ERR|LOG_INFO,
+				"Error writing %s\n", ent_src->rng_name);
+			retval = -1;
+			goto error_out;
+		}
+		r = read(ent_src->rng_fd, temp_buf,size);
+		r = (r - TPM_GET_RNG_OVERHEAD);
+		bytes_read = bytes_read + r;
+		if (bytes_read > size) {
+			memcpy(offset,temp_buf + TPM_GET_RNG_OVERHEAD,
+				r - (bytes_read - size));
+			break;
+		}
+		memcpy(offset, temp_buf + TPM_GET_RNG_OVERHEAD, r);
+		offset = offset + r;
 	}
+	retval = 0;
+error_out:
+    close(ent_src->rng_fd);
+	free(temp_buf);
+	return retval;
 }
 
 /* Initialize entropy source */
-static int discard_initial_data(void)
+static int discard_initial_data(struct rng *ent_src)
 {
 	/* Trash 32 bits of what is probably stale (non-random)
 	 * initial state from the RNG.  For Intel's, 8 bits would
@@ -79,10 +152,10 @@ static int discard_initial_data(void)
 	 * The kernel drivers should be doing this at device powerup,
 	 * but at least up to 2.4.24, it doesn't. */
 	unsigned char tempbuf[4];
-	xread(tempbuf, sizeof tempbuf);
+	xread(tempbuf, sizeof tempbuf, ent_src);
 
 	/* Return 32 bits of bootstrap data */
-	xread(tempbuf, sizeof tempbuf);
+	xread(tempbuf, sizeof tempbuf, ent_src);
 
 	return tempbuf[0] | (tempbuf[1] << 8) | 
 		(tempbuf[2] << 16) | (tempbuf[3] << 24);
@@ -91,16 +164,32 @@ static int discard_initial_data(void)
 /*
  * Open entropy source, and initialize it
  */
-void init_entropy_source(const char* sourcedev)
+int init_entropy_source(struct rng *ent_src)
 {
-	rng_fd = open(sourcedev, O_RDONLY);
-	if (rng_fd == -1) {
-		message(LOG_DAEMON|LOG_ERR, "can't open %s: %s",
-			sourcedev, strerror(errno));
-		exit(EXIT_FAIL);
+	ent_src->rng_fd = open(ent_src->rng_name, O_RDONLY);
+	if (ent_src->rng_fd == -1) {
+		return 1;
 	}
-
+	list_add(&ent_src);
 	/* Bootstrap FIPS tests */
-	fips_init(&fipsctx, discard_initial_data());
+	ent_src->fipsctx = malloc(sizeof(fips_ctx_t));
+	fips_init(ent_src->fipsctx, discard_initial_data(ent_src));
+	return 0;
 }
 
+/*
+ * Open tpm entropy source, and initialize it
+ */
+int init_tpm_entropy_source(struct rng *ent_src)
+{
+	ent_src->rng_fd = open(ent_src->rng_name, O_RDWR);
+	if (ent_src->rng_fd == -1) {
+		return 1;
+	}
+	list_add(&ent_src);
+	/* Bootstrap FIPS tests */
+	ent_src->fipsctx = malloc(sizeof(fips_ctx_t));
+	fips_init(ent_src->fipsctx, 0);
+	close(ent_src->rng_fd);
+	return 0;
+}
diff --git a/rngd_entsource.h b/rngd_entsource.h
index 5c9b350..0569dcc 100644
--- a/rngd_entsource.h
+++ b/rngd_entsource.h
@@ -28,15 +28,18 @@
 
 /* Logic and contexts */
 extern fips_ctx_t fipsctx;		/* Context for the FIPS tests */
+extern fips_ctx_t tpm_fipsctx;	/* Context for the tpm FIPS tests */
 
 /*
  * Initialize entropy source and entropy conditioning
  *
  * sourcedev is the path to the entropy source
  */
-extern void init_entropy_source(const char* sourcedev);
+extern int init_entropy_source(struct rng *);
+extern int init_tpm_entropy_source(struct rng *);
 
 /* Read data from the entropy source */
-void xread(void *buf, size_t size);
+extern int xread(void *buf, size_t size, struct rng *ent_src);
+extern int xread_tpm(void *buf, size_t size, struct rng *ent_src);
 
 #endif /* RNGD_ENTSOURCE__H */
diff --git a/rngd_linux.c b/rngd_linux.c
index 13ea618..9b34411 100644
--- a/rngd_linux.c
+++ b/rngd_linux.c
@@ -48,6 +48,7 @@
 #include "exits.h"
 #include "rngd_linux.h"
 
+extern struct rng *rng_list;
 
 /* Kernel output device */
 static int random_fd;
@@ -103,3 +104,17 @@ void random_sleep(double poll_timeout)
 	poll(&pfd, 1, 1000.0 * poll_timeout);
 }
 
+int list_add(struct rng *ent_src)
+{
+	if (rng_list) {
+		struct rng *iter;
+
+		iter = rng_list;
+		while (iter->next) {
+			iter = iter->next;
+		}
+		iter->next = ent_src;
+	} else {
+		rng_list = ent_src;
+	}
+}
